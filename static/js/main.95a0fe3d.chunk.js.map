{"version":3,"sources":["components/templates/Login/style.module.css","components/organisms/Header/style.module.css","components/atoms/Logo/logo.svg","components/atoms/Logo/style.module.css","serviceWorker.ts","components/organisms/Header/index.tsx","components/atoms/Logo/index.tsx","components/templates/Login/index.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","styles","header","Logo","logo","src","alt","Login","Fragment","box","boxHeader","field","label","inputText","type","placeholder","note","link","href","action","button","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,IAAM,mBAAmB,UAAY,yBAAyB,MAAQ,qBAAqB,MAAQ,qBAAqB,UAAY,yBAAyB,KAAO,oBAAoB,KAAO,oBAAoB,OAAS,sBAAsB,OAAS,wB,kBCA7QD,EAAOC,QAAU,CAAC,OAAS,wB,gBCD3BD,EAAOC,QAAU,IAA0B,kC,gBCC3CD,EAAOC,QAAU,CAAC,KAAO,sB,8GCWLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCbSC,EAFI,kBAAM,yBAAKC,UAAWC,IAAOC,U,gCCIjCC,EAFE,kBAAM,yBAAKH,UAAWC,IAAOG,KAAMC,IAAKD,IAAME,IAAI,U,gBCwCpDC,EAxCG,kBAChB,kBAAC,IAAMC,SAAP,KACE,yBAAKR,UAAWC,IAAOQ,KACrB,yBAAKT,UAAWC,IAAOS,WACrB,kBAAC,EAAD,OAEF,8BACE,yBAAKV,UAAWC,IAAOU,OACrB,2BAAOX,UAAWC,IAAOW,OAAzB,YACA,2BACEZ,UAAWC,IAAOY,UAClBC,KAAK,OACLC,YAAY,8BAEd,0BAAMf,UAAWC,IAAOe,MAAxB,yCAIF,yBAAKhB,UAAWC,IAAOU,OACrB,2BAAOX,UAAWC,IAAOW,OAAzB,YACA,2BACEZ,UAAWC,IAAOY,UAClBC,KAAK,WACLC,YAAY,aAEd,0BAAMf,UAAWC,IAAOe,MAAxB,2BAC2B,IACzB,uBAAGhB,UAAWC,IAAOgB,KAAMC,KAAK,KAAhC,sBAKJ,yBAAKlB,UAAWC,IAAOkB,QACrB,4BAAQnB,UAAWC,IAAOmB,QAA1B,mB,MC5BVC,IAASC,OACP,kBAAC,IAAMd,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFe,SAASC,eAAe,SJ4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.95a0fe3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"style_box__2MOwJ\",\"boxHeader\":\"style_boxHeader__C6HrR\",\"field\":\"style_field__2t5R_\",\"label\":\"style_label__1jV6L\",\"inputText\":\"style_inputText__3R5B3\",\"note\":\"style_note__32Y8e\",\"link\":\"style_link__1e6Je\",\"action\":\"style_action__-4LTV\",\"button\":\"style_button__1q8fd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"style_header__2s7QL\"};","module.exports = __webpack_public_path__ + \"static/media/logo.e82ed23d.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"style_logo__18voZ\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC } from \"react\";\nimport styles from \"./style.module.css\";\n\nconst Header: FC = () => <div className={styles.header} />;\n\nexport default Header;\n","import React, { FC } from \"react\";\nimport logo from \"./logo.svg\";\nimport styles from \"./style.module.css\";\n\n// TODO: atomsでスタイル当てている\nconst Logo: FC = () => <img className={styles.logo} src={logo} alt=\"logo\" />;\n\nexport default Logo;\n","import React, { FC } from \"react\";\nimport Logo from \"components/atoms/Logo\";\nimport styles from \"./style.module.css\";\n\n// https://demo.patternlab.io/?p=pages-login\nconst Login: FC = () => (\n  <React.Fragment>\n    <div className={styles.box}>\n      <div className={styles.boxHeader}>\n        <Logo />\n      </div>\n      <form>\n        <div className={styles.field}>\n          <label className={styles.label}>Username</label>\n          <input\n            className={styles.inputText}\n            type=\"text\"\n            placeholder=\"Username or email address\"\n          ></input>\n          <span className={styles.note}>\n            Enter your username or email address\n          </span>\n        </div>\n        <div className={styles.field}>\n          <label className={styles.label}>Password</label>\n          <input\n            className={styles.inputText}\n            type=\"password\"\n            placeholder=\"Password\"\n          ></input>\n          <span className={styles.note}>\n            Minimum of 6 characters.{\" \"}\n            <a className={styles.link} href=\"/\">\n              Forgot password?\n            </a>\n          </span>\n        </div>\n        <div className={styles.action}>\n          <button className={styles.button}>Log Me In!</button>\n        </div>\n      </form>\n    </div>\n  </React.Fragment>\n);\n\nexport default Login;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Header from \"components/organisms/Header\";\nimport Login from \"components/templates/Login\";\n// TODO: Survey Reset CSS\n// https://create-react-app.dev/docs/adding-css-reset\nimport \"ress\";\n\n// TODO: Routing\nReactDOM.render(\n  <React.Fragment>\n    <Header />\n    <Login />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}